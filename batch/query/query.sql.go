// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package query

import (
	"context"
	"database/sql"

	"github.com/lib/pq"
)

const createAuthor = `-- name: CreateAuthor :exec
INSERT INTO authors (id, name, bio) VALUES ($1, $2, $3)
`

type CreateAuthorParams struct {
	ID   int64
	Name string
	Bio  sql.NullString
}

func (q *Queries) CreateAuthor(ctx context.Context, arg CreateAuthorParams) error {
	_, err := q.db.ExecContext(ctx, createAuthor, arg.ID, arg.Name, arg.Bio)
	return err
}

const createAuthors = `-- name: CreateAuthors :exec
INSERT INTO authors
SELECT unnest($1::bigint[]) AS id,
  unnest($2::text[]) AS name,
  unnest($3::text[]) AS bio
`

type CreateAuthorsParams struct {
	Ids   []int64
	Names []string
	Bios  []string
}

func (q *Queries) CreateAuthors(ctx context.Context, arg CreateAuthorsParams) error {
	_, err := q.db.ExecContext(ctx, createAuthors, pq.Array(arg.Ids), pq.Array(arg.Names), pq.Array(arg.Bios))
	return err
}

const updateAuthor = `-- name: UpdateAuthor :exec
UPDATE authors SET name = $2, bio = $3 WHERE id = $1
`

type UpdateAuthorParams struct {
	ID   int64
	Name string
	Bio  sql.NullString
}

func (q *Queries) UpdateAuthor(ctx context.Context, arg UpdateAuthorParams) error {
	_, err := q.db.ExecContext(ctx, updateAuthor, arg.ID, arg.Name, arg.Bio)
	return err
}

const updateAuthors = `-- name: UpdateAuthors :exec
UPDATE authors AS a
SET name = tmp.name, bio = tmp.bio
FROM (
  SELECT unnest($1::bigint[]) AS id,
  unnest($2::text[]) AS name,
  unnest($3::text[]) AS bio
) AS tmp
WHERE s.id = tmp.id
`

type UpdateAuthorsParams struct {
	Ids   []int64
	Names []string
	Bios  []string
}

func (q *Queries) UpdateAuthors(ctx context.Context, arg UpdateAuthorsParams) error {
	_, err := q.db.ExecContext(ctx, updateAuthors, pq.Array(arg.Ids), pq.Array(arg.Names), pq.Array(arg.Bios))
	return err
}
