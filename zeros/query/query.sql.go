// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package query

import (
	"context"
	"database/sql"
	"time"
)

const createAuthor = `-- name: CreateAuthor :one
INSERT INTO authors (id, name, birth, bio) VALUES ($1, $2, $3, $4)
RETURNING id, name, birth, bio
`

type CreateAuthorParams struct {
	ID    int64
	Name  string
	Birth time.Time
	Bio   sql.NullString
}

func (q *Queries) CreateAuthor(ctx context.Context, arg CreateAuthorParams) (Author, error) {
	row := q.queryRow(ctx, q.createAuthorStmt, createAuthor,
		arg.ID,
		arg.Name,
		arg.Birth,
		arg.Bio,
	)
	var i Author
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Birth,
		&i.Bio,
	)
	return i, err
}

const listAuthors = `-- name: ListAuthors :many
SELECT id, name, birth, bio
FROM authors
WHERE ($1::text = '' OR name = $1)
    AND ($2::date = '0001-01-01' OR birth = $2)
    AND ($3::text = '' OR bio ILIKE '%' || $3 || '%')
`

type ListAuthorsParams struct {
	Name  string
	Birth time.Time
	Bio   string
}

func (q *Queries) ListAuthors(ctx context.Context, arg ListAuthorsParams) ([]Author, error) {
	rows, err := q.query(ctx, q.listAuthorsStmt, listAuthors, arg.Name, arg.Birth, arg.Bio)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Author
	for rows.Next() {
		var i Author
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Birth,
			&i.Bio,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
